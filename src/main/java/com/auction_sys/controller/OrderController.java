package com.auction_sys.controller;import com.alipay.api.AlipayApiException;import com.alipay.api.internal.util.AlipaySignature;import com.alipay.demo.trade.config.Configs;import com.auction_sys.common.ServerResponse;import com.auction_sys.common.constant.CommonConst;import com.auction_sys.common.constant.OrderConst;import com.auction_sys.pojo.User;import com.auction_sys.service.OrderService;import com.auction_sys.service.impl.OrderServiceImpl;import com.google.common.collect.Maps;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import java.math.BigDecimal;import java.util.Iterator;import java.util.Map;/** * Created By liuda on 2018/7/10 */@CrossOrigin("*")@Controller@RequestMapping(value = "/order/")@ResponseBodypublic class OrderController {    private static final Logger log = LoggerFactory.getLogger(OrderController.class);    @Autowired    OrderService orderService;    @PostMapping("comfirm_receipt")    public ServerResponse comfirmReceipt(HttpSession httpSession ,@RequestParam("order_id") Long orderId){        User user = (User) httpSession.getAttribute("user");        return orderService.comfirmReceipt(orderId,user.getUserId());    }    @GetMapping("get_payment_status")    public ServerResponse getPaymentStatus(HttpSession httpSession ,@RequestParam("order_id") Long orderId){        User user = (User) httpSession.getAttribute("user");        return orderService.getPaymentStatus(orderId,user.getUserId());    }    @PostMapping("create_order")    public ServerResponse createOrder(HttpSession httpSession ,@RequestParam("product_id") Long productId,@RequestParam("payment") BigDecimal payment            ,@RequestParam("shipping_id") Long shippingId){        User user = (User) httpSession.getAttribute("user");        return orderService.createOrder(productId,user.getUserId(),payment,shippingId);    }    @GetMapping("check_bid")    public ServerResponse bidProduct(HttpSession httpSession ,@RequestParam("product_id") Long productId,@RequestParam("payment") BigDecimal payment){        User user = (User) httpSession.getAttribute("user");        return orderService.checkBid(productId,user.getUserId(),payment);    }    @PostMapping("deposit_pay")    public ServerResponse depositPay(HttpSession httpSession ,@RequestParam("deposit_order_id") Long doId){        User user = (User) httpSession.getAttribute("user");        return orderService.bidderDepositPay(doId,user.getUserId());    }    @PostMapping("product_order_pay")    public ServerResponse productOrderPay(HttpSession httpSession ,@RequestParam("product_order_id") Long poId){        User user = (User) httpSession.getAttribute("user");        return orderService.productOrderFianlPay(poId,user.getUserId());    }    @PostMapping("deposit_refund")    public ServerResponse depositRefund(HttpSession httpSession ,@RequestParam("deposit_id") Long depositId){        User user = (User) httpSession.getAttribute("user");        return orderService.depositRefund(depositId,user.getUserId());    }    @PostMapping("alipay_callback")    public Object alipayCallback(HttpServletRequest request){        Map<String,String> params = Maps.newHashMap();        Map requestParams = request.getParameterMap();        for(Iterator iter = requestParams.keySet().iterator(); iter.hasNext();){            String name = (String)iter.next();            String[] values = (String[]) requestParams.get(name);            String valueStr = "";            for(int i = 0 ; i <values.length;i++){                valueStr = (i == values.length -1)?valueStr + values[i]:valueStr + values[i]+",";            }            params.put(name,valueStr);        }        log.info("支付宝回调,sign:{},trade_status:{},参数:{}",params.get("sign"),params.get("trade_status"),params.toString());        //非常重要,验证回调的正确性,是不是支付宝发的.并且呢还要避免重复通知.        params.remove("sign_type");        try {            boolean alipayRSACheckedV2 = AlipaySignature.rsaCheckV2(params, Configs.getAlipayPublicKey(),"utf-8",Configs.getSignType());            if(!alipayRSACheckedV2){                return ServerResponse.createByError(CommonConst.CommonResponStateConst.ILLEGAL_PARAMETETS);            }        } catch (AlipayApiException e) {            log.error("支付宝验证回调异常",e);        }        ServerResponse serverResponse = orderService.aliCallback(params);        if(serverResponse.isSuccess()){            return OrderConst.AlipayCallbackConst.RESPONSE_SUCCESS;        }        return OrderConst.AlipayCallbackConst.RESPONSE_FAILED;    }    @GetMapping("get_payment_status")    public ServerResponse getPaymentStatus(@RequestParam("orderId") Long orderId,HttpSession httpSession){        User user = (User) httpSession.getAttribute("user");        return null;    }}